// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  DRIVER
  MODERATOR
  STAFF
  STORE
  MERCHANT
}

enum Status {
  ACTIVE
  INACTIVE
  BANNED
}

enum MerchantStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id                  Int       @id @default(autoincrement())
  name                String    @db.VarChar(50)
  email               String    @unique @db.VarChar(100)
  password            String
  resetPasswordToken  String?
  resetTokenExpiresAt DateTime?
  phoneNumber         String?   @db.VarChar(20)
  role                Role      @default(USER)
  isActive            Boolean   @default(true)
  status              Status    @default(ACTIVE)
  verificationToken   String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  lastLogin           DateTime?
  merchants           Merchant[]
  orders              Order[]
  deliveries          Delivery[]
  @@index([email])
}

model Merchant {
  id                  Int              @id @default(autoincrement())
  name                String           @db.VarChar(100)
  category            String           @db.VarChar(50)
  owner               User             @relation(fields: [ownerId], references: [id])
  ownerId             Int
  documents           Json
  status              MerchantStatus   @default(PENDING)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  products            Product[]
  @@index([name])
}

model Product {
  id                  Int       @id @default(autoincrement())
  name                String    @db.VarChar(100)
  price               Float
  description         String?
  merchant            Merchant  @relation(fields: [merchantId], references: [id])
  merchantId          Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  orderItems          OrderItem[]
  @@index([name])
}

model Order {
  id                  Int           @id @default(autoincrement())
  user                User          @relation(fields: [userId], references: [id])
  userId              Int
  status              OrderStatus   @default(PENDING)
  totalAmount         Float
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  orderItems          OrderItem[]
  delivery            Delivery?
}

model OrderItem {
  id                  Int       @id @default(autoincrement())
  order               Order     @relation(fields: [orderId], references: [id])
  orderId             Int
  product             Product   @relation(fields: [productId], references: [id])
  productId           Int
  quantity            Int
  price               Float
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Delivery {
  id                  Int       @id @default(autoincrement())
  order               Order     @relation(fields: [orderId], references: [id])
  orderId             Int       @unique
  driver              User      @relation(fields: [driverId], references: [id])
  driverId            Int
  status              String    @db.VarChar(50)
  estimatedDelivery   DateTime?
  actualDelivery      DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}